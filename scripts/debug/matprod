import numpy as np


def matprod(x1, x2):

    l1 = (x1.shape[0] - 1) // 2
    l2 = (x2.shape[0] - 1) // 2
    l = l1 + l2
    x1x2 = np.zeros((x1.shape[1], x2.shape[2], 2 * l + 1))
    for m, x1_m in enumerate(x1):
        for n, x2_n in enumerate(x2):
            x1x2[:, :, m + n] += np.dot(x1_m, x2_n)

    return x1x2


def matprodfast(x1, x2):
    """
    (I, I, J) * (J, J, J) --> (I, J, I + J - 1)

    """
    I = x1.shape[0]
    J = x2.shape[0]
    p = np.zeros((I, J, I + J - 1))
    for m in range(I):
        for n in range(J):
            for i in range(I):
                for j in range(J):
                    for k in range(J):
                        p[i, j, m + n] += x1[m, i, k] * x2[n, k, j]

    return p


I = 15
J = 9
x1 = np.random.randn(I, I, J)
x2 = np.random.randn(J, J, J)
assert np.allclose(matprod(x1, x2), matprodfast(x1, x2))
